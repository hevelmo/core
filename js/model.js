/*
    Here are functions and methods that are models whose performance is used in all the project
    to invoke some of this models it's necessary to call with the prefix, and then te name of the
    model and its arguments, for example PRO.momentToHuman(date, language);
    Each method has a large explanation.

    NOTE: the prefix PRO will change depends on the specific project.

    For the correct performance of almost all of the methods
    it's necesary to includ JQuery library
 **/


//[Models] Modelos
var PRO = {};

PRO = (function() {
    var $this = this;
    /*
     ###################################################################################################
     Moment Español
     ###################################################################################################
    */
        moment.lang('es', {months: "Enero_Febrero_Marzo_Abril_Mayo_Junio_Julio_Agosto_Septiembre_Octubre_Noviembre_Diciembre".split("_"), monthsShort: "ene._feb._mar_abr._may_jun_jul._ago_sep._oct._nov._dic.".split("_"), weekdays: "Domingo_Lunes_Martes_Miércoles_Jueves_Viernes_Sábado".split("_"), weekdaysShort: "dom._lun._mar._mier._juev._vie._sab.".split("_"), weekdaysMin: "Do_Lu_Ma_Mi_Ju_Vi_Sa".split("_"), longDateFormat: {LT: "HH:mm", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY LT", LLLL: "dddd D MMMM YYYY LT"}, calendar: {sameDay: "[Hoy a las] LT", nextDay: '[Mañanaalas]LT', nextWeek: 'dddd[a]LT', lastDay: '[Ayera]LT', lastWeek: 'dddd[hasta]LT', sameElse: 'L'}, relativeTime: {future: "en %s", past: "hace %s", s: "unos segundos", m: "un minuto", mm: "%d minutos", h: "una hora", hh: "%d horas", d: "un día", dd: "%d dias", M: "un mes", MM: "%d meses", y: "un año", yy: "%d años"}, ordinal: function(number) {returnnumber + (number === 1 ? 'er' : 'a');}, week: {dow: 1, doy: 6}});
    /*
     ###################################################################################################
     MOMENT's Models
     ###################################################################################################
    */
        /*
         *This function transforms a date in a friendly format to read to an human
         *PARAMS:
         *   date: Is a string with the date that will be transformed (mandatory).
         *   language: Is the selected language (es, en, fr, etc) (mandatory).
         *
         *RETURN: string
         *   New date fromat
         *EXAMPLE:
         *   '2015-02-16 17:18:00' is changed into 'Lunes, 16 de febrero de 2015, 5:18 PM'
         *   It depends on the selected language
         *
         *SPECIAL REQUIREMENTS:
         *   It's necesary to include 'moment.js' or 'moment.min.js' library before including 'model.js'
         *
        **/
            function momentToRoman(date, language) {
                moment.lang(language);
                return moment(date).format('dddd[,] LL');
            }
        /*
         *This function returns the time (in friendly human format)
         *that has lapsed from an date in the past until now
         *
         *PARAMS:
         *   date: Is a string with the date it will be calculated the lapsed thime (mandatory).
         *   language: Is the selected language (es, en, fr, etc) (mandatory).
         *
         *RETURN: string
         *   Lapsed time in new format
         *EXAMPLE:
         *   From '2015-02-16 17:18:00' until now '2015-02-16 17:39:00' was 'hace 21 minutos'
         *   It depends on the selected language
         *
         *SPECIAL REQUIREMENTS:
         *   It's necesary to include 'moment.js' or 'moment.min.js' library before including 'model.js'
         *
        **/
            function momentToHuman(date, language) {
                moment.lang(language);
                return moment(date, "YYYY-MM-DD hh:mm:ss").fromNow(true);
            }
    /*
     ###################################################################################################
     Handlebars's Models
     ###################################################################################################
    */
        /*
         *This function loads a handlebars' template (previously compiled)
         *in a specific element from the DOM
         *
         *PARAMS:
         *   name: Is a string with the template's name (mandatory).
         *   wrapper: Is a string with the id or class ('#domElement', '.domElement')
         *            where the template will be loaded (mandatory).
         *   filler: Is a JSON with the necesary dinamic info to be loaded in the template (optional).
         *
         *SPECIAL REQUIREMENTS:
         *   It's necesary to include 'handlebars.runtime.min.js' library and
         *   'templates.min.js' generated by precomplileing
         *   before including 'model.js'
         *
        **/
            function loadTemplate(name, wrapper, filler) {
                var template = Handlebars.templates[name];
                if (filler) {
                    $(wrapper).html(template(filler));
                } else {
                    $(wrapper).html(template);
                }
            }
    /*
     ###################################################################################################
     DOM's Models
     ###################################################################################################
    */
        /*
         *This function gets the value from an especific DOM element
         *
         *PARAMS:
         *   domElement: Is a string with the id or class ('#domElement', '.domElement')
         *               of the DOM element whose value will be returned (mandatory).
         *   new_value: Is a string with the value that will update 'domElement' vaue (mandatory).
         *
         *RETURN: string
         *   domElement value
        **/
            function getValue(domElement) {
                return $(domElement).val();
            }
        /*
         *This function updates the value from an especific DOM element
         *
         *PARAMS:
         *   domElement: Is a string with the id or class ('#domElement', '.domElement')
         *               of the DOM element whose value will be updated (mandatory).
         *   new_value: Is a string with the value that will update 'domElement' vaue (mandatory).
        **/
            function setValue(domElement, new_value) {
                $(domElement).val(new_value);
            }
        /*
         *This function detects if value is or not defined by id or class
         *
         *PARAMS:
         *   domElement: Is a string with the id or class ('#domElement', '.domElement')
         *               of the DOM element whose value will be updated (mandatory).
         *   new_value: Is a string with the value that will update 'domElement' vaue (mandatory).
         *
         *RETURN: boolean
         *   true: if it has value
         *   false: if it doesnt have a value
         *
        **/
            function exist(domElement) {
                return ($(domElement).val()) ? true : false;
            }
        /*
         *This function trims the value from an especific DOM element
         *
         *PARAMS:
         *   domElement: Is a string with the id or class ('#domElement', '.domElement')
         *               of the DOM element whose value will be trimmed (mandatory).
        **/
            function trimValue(domElement) {
                var value, clean;
                value = $(domElement).val();
                clean = $.trim(value);
                $(domElement).val(clean);
            }
        /*
         *This function returns the HTML content wrapped in an specific DOM element
         *
         *PARAMS:
         *   domElement: Is a string with the id or class ('#domElement', '.domElement')
         *               of the DOM element whose HTML will be returned (mandatory).
         *
         *RETURN: string
         *   domElement HTML
        **/
            function getHTML(domElement) {
                return $(domElement).html();
            }
        /*
         *This function updates the HTML content wrapped in an especific DOM element
         *
         *PARAMS:
         *   domElement: Is a string with the id or class ('#domElement', '.domElement')
         *               of the DOM element whose HTML will be updated (mandatory).
        **/
            function setHTML(domElement, information) {
                $(domElement).html(information);
            }
        /*
         *This function crypts the value from an especific DOM element
         *It's sha512 crypting
         *
         *PARAMS:
         *   domElement: Is a string with the id or class ('#domElement', '.domElement')
         *               of the DOM element whose value will be crypted (mandatory).
         *
         *SPECIAL REQUIREMENTS:
         *   It's necesary to include 'sha512.js' library before including 'model.js'
         *
        **/
            function cryptElement(domElement) {
                var pass, pass_sha;
                pass = $(domElement).val();
                pass_sha = hex_sha512(pass);
                $(domElement).val(pass_sha);
            }
        /*
         *This function apend one new element to an existent domElement
         *
         *PARAMS:
         *   domElement: Is a string with the id or class ('#domElement', '.domElement')
         *               of the element where we can't append the new element (mandatory).
         *   new_el_type: Is a string with the html type (div, input, etc) of the element
         *                be careful it's a correct one, because the method doesn't
         *                doesn't distinguish is it's correct or not (mandatory).
         *   new_el_attributes: Is an objetc with the attributes to the new element, they
         *                      will be included in the exactly order they are in the object,
         *                      be careful to use correct attributes because the method dosent
         *                      distinguish if they are or not correct (mandatory).
         *                      if you don't want atributes send an empty object {}
         *   new_el_content: Is a string with the content of the element (mandatory).
                             if you don't want content send an empty string.
         *   hasClosingTag: Is an integer who idicates if the element has (1) or not(2) a
         *                  closing tag.
         *EXAMPLE:
         *   Imagine we have the empty element <div id='my_div'></div>
         *
         *   new_el_attributes = {'id': 'myId', 'class': 'myClass', 'value' : '2'}
         *   appendOne('div#my_div', 'div', new_el_attributes, 'Hello Div', 1);
         *
         *   The result is:
         *
         *   <div id='my_div'>
         *       <div id='myId' class='myClass' value='2'>Hello Div</div>
         *   </div>
         *
         *   Imagine the same empty element.
         *
         *   new_el_attributes = {'id': 'myId', 'class': 'myClass', 'value' : '2', 'data-my-data' : '2', 'name' : 'myName'}
         *   appendOne('div#my_div', 'div', new_el_attributes, '', 0);
         *
         *   The result is:
         *
         *   <div id='my_div'>
         *       <input id='myId' class='myClass' value='2' data-my-data='2' name='myName' />
         *   </div>
         *
        **/
            function appendOne(domElement, new_el_type, new_el_attributes, new_el_content, hasClosingTag) {
                var new_domElement;
                new_domElement = '<' + new_el_type;
                for (var key in new_el_attributes) {
                    new_domElement += (new_el_attributes.hasOwnProperty(key))
                            ? ' ' + key + "='" + new_el_attributes[key] + "'"
                            : '';
                }
                if(hasClosingTag) {
                    new_domElement += '>';
                    new_domElement += new_el_content;
                    new_domElement += '</' + new_el_type + '>';
                } else {
                    new_domElement += ' >';
                    new_domElement += new_el_content;
                }
                $(domElement).append(new_domElement);
            }
        /*
         *This function apend multiple new elements to an existent domElement.
         *It uses de performance of the appenOne method. The elements are appended
         *in the exact order they are declared.
         *
         *PARAMS:
         *   domElement: Is a string with the id or class ('#domElement', '.domElement')
         *               of the element where we can't append the new elements (mandatory).
         *   elements: is an array of type [new_el_type, new_el_attributes, new_el_content, hasClosingTag]
         *             each one of this elements are explained in the appendOne method.
         *
         *EXAMPLE:
         *   <div id='my_div'></div>
         *
         *   elements = [
         *       ['div', {'id' : 'element1', 'class':'multiDiv'}, 'Hello element 1', 1],
         *       ['input', {'id' : 'element2', 'class':'inputDiv', 'value' : 1, 'name' : 'input_1'}, 'Text input', 0],
         *       ['input', {'id' : 'element3', 'class':'inputDiv', 'value' : 3, 'name' : 'input_2'}, '', 0],
         *       ['div', {'id' : 'element4', 'class':'multiDiv'}, 'Hello element 4', 1]
         *   ];
         *
         *   appendMulti(''div#my_div', elements);
         *
         *   The result is:
         *
         *   <div id='my_div'>
         *       <div id='element1' class='multiDiv'>Hello element 1</div>
         *       <input id='element2' class='inputDiv' value='1' name='input_1' />Text input
         *       <input id='element3' class='inputDiv' value='3' name='input_2' />
         *       <div id='element4' class='multiDiv'>Hello element 4</div>
         *   </div>
         *
        **/
            function appendMulti(domElement, elements) {
                for (var i = 0; i < elements.length; i++) {
                    appendOne(domElement,
                        elements[i][0], //new_el_type
                        elements[i][1], //new_el_attributes
                        elements[i][2], //new_el_content
                        elements[i][3]  //hasClosingTag
                    );
                }
            }
    /*
     ###################################################################################################
     DATE TIME PICKER's Models
     ###################################################################################################
    */
        /*
         *This function sets the data of a 'DateTimePicker' calendar
         *
         *PARAMS:
         *   wrapper: Is a string with the id of the input ('input#wrapper')
         *            that wraps the 'DateTimePicker' calendar.
         *   futureDays: Is an integer with the number of days we want to advance
         *               from the current date.
         *   hasMinDate: It a flag that determins if the calendar will have (1) or
         *   (0) not a minimun date.
        **/
            function setDateTPCalendar (wrapper, futureDays, hasMinDate) {
                var today, yesterday, year, month, day, future;
                today = new Date();
                yesterday = new Date(today);
                yesterday.setDate(today.getDate() + futureDays);
                year = yesterday.getFullYear();
                month =+ yesterday.getMonth();
                month = month + 1;
                day = yesterday.getDate();
                future = year + '-' + month + '-' + day;
                $(wrapper).datetimepicker({pickTime: false});
                if (hasMinDate) {
                    $(wrapper).data("DateTimePicker").setMinDate(yesterday);
                    $(wrapper).data("DateTimePicker").setDate(future);
                } else {
                    $(wrapper).data("DateTimePicker").setDate(future);
                }
            }
    /*
     ###################################################################################################
     FORMS's Models
     ###################################################################################################
    */
        /*
         *This function validates if an specific form is full
         *
         *PARAMS:
         *   entered_inputs: Is a JSON with the entered inputs from the form (mandatory).
         *   required_inputs_names: Is an array with the names of the required inputs from the form (mandatory).
         *
         *RETURN: boolean
            true: if it is full
            false: if it is not full
        **/
            function validFormFull(entered_inputs, required_inputs_names) {
                var size;
                size = _.size(_.compact(_.pick(entered_inputs, required_inputs_names)));
                return (size === required_inputs_names.length) ? true : false;
            }
        /*
         *This function validates if an specific form is not empty
         *
         *PARAMS:
         *   entered_inputs: Is a JSON with the entered inputs from the form (mandatory).
         *   required_inputs_names: Is an array with the names of the required inputs from the form (mandatory).
         *
         *RETURN: boolean
            true: if it is empty
            false: if it is not empty
        **/
            function validFormEmpty(entered_inputs, required_inputs_names) {
                var size;
                size = _.size(_.compact(_.pick(entered_inputs, required_inputs_names)));
                return (!size) ? true : false;
            }
        /*
         *This function resets an specific form
         *
         *PARAMS:
         *   form: Is a string with the id or class ('form#some_form', 'form.some_form')
         *   of the for that will be rested
        **/
            function resetForm(form) {
                $(form).each ( function() {
                    this.reset();
                });
            }
    /*
     ###################################################################################################
     AJAX's Models
     ###################################################################################################
    */
        /*
         *This function sends a JSON to an especific url, using AJAX and POST method
         *It expects a JSON when it's succesful
         *
         *PARAMS:
         *   custom_url: Is the url where 'json' will be sent (mandatory).
         *   json: Is the JSON that will be sent to custom_url (mandatory).
         *
         *RETURN: $.ajax
            Shipping outcome.
            It doesn't have 'error' neither 'success' method, in order to customize the
            in every place where postalService is invoked
        **/
            function postalService(custom_url, json) {
                return $.ajax({
                    type: 'POST',
                    contentType: 'application/json',
                    url: custom_url,
                    dataType: "json",
                    data: JSON.stringify(json)
                });
            }
        /*
         *This function gets an internal JSON from an especific url, using AJAX
         *
         *PARAMS:
         *   url: Is the url from an internal json will be gotten (mandatory).
         *RETURN: JSON
            With the information from the url
        **/
            function getInternalJSON(url) {
                var extJSON;
                extJSON = (function() {
                    var intJSON = null;
                    $.ajax({
                        async: false,
                        global: false,
                        url: url,
                        dataType: 'json',
                    }).done(function(data) {
                        intJSON = data;
                    });
                    return intJSON;
                })();
                return extJSON;
            }
    /*
     ###################################################################################################
     OBJECTS's Models
     ###################################################################################################
    */
        /*
         *This function look for all the values from an array object while the especific
         *key has the same or difrent value (it depends on de condition) that the value
         *searched.
         *
         *PARAMS:
         *   arrayObj: Is an array of objects (mandatory).
         *   key: Is a string with the name of the key through which will filter arrayObj (mandatory).
         *   value: Is a string with the value we seek in the specified key (mandatory).
         *   equal: Is an integer that determines whether looking values whose key has
         *          the same (1) or different value (0) (mandatory).
         *
         *RETURN: array
         *   An array of values that fullfills the before mentioned condition.
         *
         *EXAMPLE:
         *   arrayObj = [
         *      {'key' : 'a', 'key2' : 'a', 'key3' : '1'},
         *      {'key' : 'b', 'key2' : 'c', 'key3' : '1'},
         *      {'key' : 'a', 'key2' : 'a', 'key3' : '2'},
         *      {'key' : 'a', 'key2' : 'd', 'key3' : '3'}
         *   ];
         *
         *   filterArrayObjByKey(arrayObj, 'key2', 'a', 1);
         *   returns ["a", "a"];
         *
         *   filterArrayObjByKey(arrayObj, 'key2', 'a', 0);
         *   returns ["c", "d"];
         *
         *SPECIAL REQUIREMENTS:
         *   It's necesary to include 'underscore.js' or 'underscore-min.js' library before including 'model.js'
         *
        **/
            function filterArrayObjByKey(arrayObj, key, value, equal) {
                return _.filter(
                        _.pluck(arrayObj, key),
                        function(currentElement) {
                            return (equal)
                                ? currentElement === value
                                : currentElement !== value;
                        }
                );
            }
        /*
         *This function sums all the values in an especific numeric key in an arrays of objects
         *
         *PARAMS:
         *   arrayObj: Is an array of objects where we expect there are a key whose all values
         *             are integer type (mandatory).
         *   numKey: Is a string with the name of the key whose numeric value we want to obtain,
         *           be careful all the values in the key are numeric, because the result couldn't
         *           be the expected one (mandatory).
         *
         *RETURN: number
         *   The result of the sum of the values in the key.
         *
         *EXAMPLE:
         *   arrayObj = [
         *      {'key' : true, 'key2' : 'd', 'key3' : 1.1},
         *      {'key' : false, 'key2' : 1, 'key3' : 1.78},
         *      {'key' : true, 'key2' : 'a', 'key3' : 2.67},
         *      {'key' : false, 'key2' : 'd', 'key3' : 3.11}
         *   ];
         *
         * sumArrayObjByKey(arrayObj, 'key3');
         * returns 8.66;
        **/
            function sumArrayObjByKey(arrayObj, numKey) {
                return _.reduce(
                        _.pluck(arrayObj, numKey),
                        function(sum, num) {
                            return sum + num;
                        }
                );
            }
        /*
         *This function rename the keys in an array of objects, it only gets the specified keys
         *and ignore the rest of them.
         *
         *PARAMS:
         *   arrayObj: An array of objects whose keys whe want to rename (mandatory).
         *   renameKeys: An object whit the old and new names of the keys
         *   {'new_name' : 'old_name'} (mandatory).
         *RETURN: Array of objets
         *   This new array has the objects with only the specified renamed keys an their
         *   related values.
         *EXAMPLE:
         *   arrayObj = [
         *       {'k1' : 'Javier', 'k2' : 'a', 'k3' : 25, 'k4' : 1.83},
         *       {'k1' : 'Melissa', 'k2' : 'b', 'k3' : 20, 'k4' : 1.60},
         *       {'k1' : 'Juan', 'k2' : 'c', 'k3' : 31, 'k4' : 1.75},
         *       {'k1' : 'Alicia', 'k2' : 'd', 'k3' : 17, 'k4' : 1.64}
         *   ];
         *   renameKeys = {
         *       'name' : 'k1',
         *       'age' : 'k3',
         *       'height' : 'k4'
         *   }
         *
         *   renameArrayObjKeys(arrayObj, renameKeys);
         *   returns [
         *       {'name' : 'Javier', 'age' : 25, 'height' : 1.83},
         *       {'name' : 'Melissa', 'age' : 20, 'height' : 1.60},
         *       {'name' : 'Juan', 'age' : 31, 'height' : 1.75},
         *       {'name' : 'Alicia', 'age' : 17, 'height' : 1.64}
         *   ];
         *
         *SPECIAL REQUIREMENTS:
         *   It's necesary to include 'underscore.js' or 'underscore-min.js' library before including 'model.js'
         *
        **/
            function renameArrayObjKeys(arrayObj, renameKeys) {
                var newArrayObj, pairs;
                newArrayObj = [];
                pairs = _.pairs(renameKeys);
                for(var i = 0; i < arrayObj.length; i++) {
                    newArrayObj[i] = {};
                    for(j = 0; j < pairs.length; j++) {
                        newArrayObj[i][pairs[j][0]] = arrayObj[i][pairs[j][1]];
                    }
                }
                return newArrayObj;
            }

        /*
         *This function removes from an array of objects, the objects
         *whose key values are the same to the specified in withoutObj
         *this fuction performs like AND.
         *
         *PARAMS:
         *   arrayObj: Is an array of objects tha we will clean of objects with
                       the specific values in one or more specific keys (mandatory).
         *   withoutObj: Is an objet with the keys and values we don't want (mandatory).
         *
         *RETURN: Array of objects
         *   The array without the objects with the specific values in the specific keys
         *
         *EXAMPLE:
         *   arrayObj = [
         *        {'name' : 'Javier', 'age' : 25, 'height' : 1.83},
         *        {'name' : 'Melissa', 'age' : 20, 'height' : 1.60},
         *        {'name' : 'Juan', 'age' : 31, 'height' : 1.75},
         *        {'name' : 'Alicia', 'age' : 25, 'height' : 1.64}
         *   ];
         *
         *   //Remove all the objects whose 'age' is 25
         *   withoutObj = {'age' : 25};
         *   withoutArrayObjAND(arrayObj, withoutObj);
         *   returns [
         *        {'name' : 'Melissa', 'age' : 20, 'height' : 1.60},
         *        {'name' : 'Juan', 'age' : 31, 'height' : 1.75},
         *   ];
         *
         *   //Remove all the objects whose 'age' is 25 and whose 'name' is 'Javier'
         *   withoutObj = {'age' : 25, 'name' : 'Javier'};
         *   withoutArrayObjAND(arrayObj, withoutObj);
         *   returns [
         *        {'name' : 'Melissa', 'age' : 20, 'height' : 1.60},
         *        {'name' : 'Juan', 'age' : 31, 'height' : 1.75},
         *        {'name' : 'Alicia', 'age' : 25, 'height' : 1.64}
         *   ];
         *
         *SPECIAL REQUIREMENTS:
         *   It's necesary to include 'underscore.js' or 'underscore-min.js' library before including 'model.js'
         *
        **/
            function withoutArrayObjAND(arrayObj, withoutObj) {
                var length, newLength;
                do{
                    length = arrayObj.length;
                    arrayObj = _.without(
                        arrayObj,
                        _.findWhere(
                            arrayObj,
                            withoutObj
                        )
                    );
                    newLength = arrayObj.length;
                } while(length !== newLength);
                return arrayObj;
            }
        /*
         *This function removes from an array of objects, the objects
         *whose key values are the same to the specified in withoutObj
         *this fuction performs like OR.
         *For each 'key' : 'value', it uses the performance from
         *'withoutArrayObjAND' method.
         *
         *PARAMS:
         *   arrayObj: Is an array of objects tha we will clean of objects with
         *             the specific values in one or more specific keys (mandatory).
         *   withoutObj: Is an objet with the keys and values we don't want (mandatory).
         *
         *RETURN: Array of objects
         *   The array without the objects with the specific values in the specific keys.
         *
         *EXAMPLE:
         *   arrayObj = [
         *        {'name' : 'Javier', 'age' : 25, 'height' : 1.83},
         *        {'name' : 'Melissa', 'age' : 20, 'height' : 1.60},
         *        {'name' : 'Juan', 'age' : 31, 'height' : 1.75},
         *        {'name' : 'Alicia', 'age' : 25, 'height' : 1.64}
         *   ];
         *
         *   //Remove all the objects whose 'age' is 25 or whose 'name' is 'Melissa'
         *   withoutObj = {'age' : 25, 'name' : 'Javier'};
         *   withoutArrayObjOR(arrayObj, withoutObj);
         *   returns [
         *        {'name' : 'Juan', 'age' : 31, 'height' : 1.75},
         *   ];
         *
         *SPECIAL REQUIREMENTS:
         *   It's necesary to include 'underscore.js' or 'underscore-min.js' library before including 'model.js'
         *
        **/
            function withoutArrayObjOR(arrayObj, withoutObj) {
                pairs = _.pairs(withoutObj);
                withoutArrayObj = [];
                for (var idx=0; idx < pairs.length; idx++) {
                    withoutArrayObj[idx] = new Object();
                    withoutArrayObj[idx][pairs[idx][0]] = pairs[idx][1];
                }
                for(idx = 0; idx < withoutArrayObj.length ; idx++) {
                    arrayObj = withoutArrayObjAND(arrayObj, withoutArrayObj[idx]);
                }
                return arrayObj;
            }
        /*
     ###################################################################################################
     NUMBER FORMATS's Models
     ###################################################################################################
    */
        /*
         *This function transfors a numeric value in money format
         *It's sha512 crypting
         *
         *PARAMS:
         *   number: Is a number that value will be changed in money format (mandatory).
         *
         *RETURN: string
         *   With number in money format
         *
         *SPECIAL REQUIREMENTS:
         *   It's necesary to include 'sha512.js' library before including 'model.js'
        **/
            function currencyFormat(number) {
                var formattedAuantity;
                formattedAuantity = accounting.formatMoney(number);
                return formattedAuantity;
            }
    /*
     ###################################################################################################
     OTHER Models
     ###################################################################################################
    */
        /*
         *This function
         *
         *PARAMS:
         *   name:
        **/
            function randomString(name) {
                var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz";
                var string_length = 4;
                var randomstringb = '';
                for (var i = 0; i < string_length; i++) {
                    var rnum = Math.floor(Math.random() * chars.length);
                    randomstringb += chars.substring(rnum, rnum + 1);
                }
                randomstringb;
                $(name).val(randomstringb);
            }
    /*
     ###################################################################################################
     Returning all Models
     ###################################################################################################
    */
    return {
              momentToHuman : momentToHuman,
              momentToRoman : momentToRoman,
               loadTemplate : loadTemplate,
                   getValue : getValue,
                   setValue : setValue,
                      exist : exist,
                    getHTML : getHTML,
                    setHTML : setHTML,
                  appendOne : appendOne,
                appendMulti : appendMulti,
                  trimValue : trimValue,
               cryptElement : cryptElement,
            setDateTPCalendar : setDateTPCalendar,
              validFormFull : validFormFull,
             validFormEmpty : validFormEmpty,
                  resetForm : resetForm,
              postalService : postalService,
            getInternalJSON : getInternalJSON,
        filterArrayObjByKey : filterArrayObjByKey,
           sumArrayObjByKey : sumArrayObjByKey,
         renameArrayObjKeys : renameArrayObjKeys,
         withoutArrayObjAND : withoutArrayObjAND,
          withoutArrayObjOR : withoutArrayObjOR,
             currencyFormat : currencyFormat,
               randomString : randomString
    }
}());
